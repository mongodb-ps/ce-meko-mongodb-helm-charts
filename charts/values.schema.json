{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "required": [
    "clusterName",
    "mongoDBVersion",
    "opsManager",
    "tls",
    "mongoDBAdminPasswdSecret"
  ],
  "properties": {
    "clusterName": {
      "type": "string"
    },
    "mongoDBVersion": {
      "type": "string",
      "pattern": "(^(?:[0-9]\\.){2}[0-9]{1,2}-ent$)"
    },
    "logLevel": {
      "type": "string",
      "pattern": "(^INFO|DEBUG$)"
    },
    "opsManager": {
      "type": "object",
      "required": [
        "tlsEnabled",
        "baseUrl",
        "orgId",
        "projectName"
      ],
      "properties": {
        "tlsEnabled": {
          "type": "boolean"
        },
        "if": {
          "properties": {
            "tlsEnabled": {
              "const": true
            }
          }
        },
        "then": {
          "required": [
            "omSecret",
            "caConfigmap"
          ],
          "properties": {
            "omSecret": {
              "type": "string"
            },
            "caConfigmap": {
              "type": "string"
            }
          }
        },
        "baseUrl": {
          "type": "string",
          "pattern": "(^https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)$)"
        },
        "orgId": {
          "type": "string",
          "pattern": "(^[0-9a-f]{24}$)"
        },
        "projectName": {
          "type": "string"
        }
      }
    },
    "tls": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "if": {
          "properties": {
            "enabled": {
              "const": true
            }
          }
        },
        "then": {
          "required": [
            "caConfigMap"
          ],
          "properties": {
            "caConfigMap": {
              "type": "string"
            }
          }
        }
      }
    },
    "mongoDBAdminPasswdSecret": {
      "type": "string"
    },
    "mongoDBFCV": {
      "type": "string",
      "pattern": "(^[1-9][0-9]?\\.[0-9]$)"
    },
    "auth": {
      "type": "object",
      "properties": {
        "scram": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          } 
        },
        "ldap": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "if": {
              "properties": {
                "enabled": {
                  "const": true
                }
              }
            },
            "then": {
              "required": [
                "servers",
                "caConfigMap",
                "ldaps",
                "bindUserDN",
                "bindUserSecret",
                "userToDNMapping"
              ],
              "properties": {
                "servers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "((^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$))|^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)+([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])"
                  }
                },
                "ldaps": {
                  "type": "boolean"
                },
                "caConfigMap": {
                  "type": "string"
                },
                "bindUserDN": {
                  "type": "string"
                },
                "bindUserSecret": {
                  "type": "string"
                },
                "userToDNMapping": {
                  "type": "string"
                },
                "authzQueryTemplate": {
                  "type": "string"
                }
              }
            }
          } 
        }
      }
    },
    "additionalUsers": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/userObject"
      }
    },
    "sharding": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      },
      "if": {
        "properties": {
          "enabled": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "shardSrv",
          "configSrv",
          "mongos"
        ],
        "properties": {
          "shardSrv": {
            "type": "object",
            "required": [
              "shards",
              "memberPerShard",
              "storage"
            ],
            "properties": {
              "resources": {
                "$ref": "#/$defs/resourceObject"
              },
              "storage": {
                "type": "object",
                "required": [
                  "persistenceType"
                ],
                "properties": {
                  "persistenceType": {
                    "type": "string",
                    "pattern": "(^single|multiple$)"
                  },
                  "if": {
                    "properties": {
                      "persistenceType": {
                        "const": "single"
                      }
                    }
                  },
                  "then": {
                    "required": [
                      "single"
                    ],
                    "single": {
                      "type": "object",
                      "required": [
                        "size",
                        "storageClass"
                      ],
                      "properties": {
                        "size": {
                          "type": "string",
                          "pattern": "(^[1-9]\\d*(?:\\.\\d+)?(?:E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)$)"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "configSrv": {
            "type": "object",
            "required": [
              "replicas",
              "storage"
            ],
            "properties": {
              "storage": {
                "type": "object",
                "required": [
                  "persistenceType"
                ],
                "properties": {
                  "nfs": {
                    "type": "boolean"
                  },
                  "persistenceType": {
                    "type": "string",
                    "pattern": "(^single|multiple$)"
                  },
                  "if": {
                    "properties": {
                      "persistenceType": {
                        "const": "single"
                      }
                    }
                  },
                  "then": {
                    "required": [
                      "single"
                    ],
                    "single": {
                      "$ref": "#/$defs/storageObject"
                    }
                  },
                  "else": {
                    "type": "object",
                    "required": [
                      "multiple"
                    ],
                    "properties": {
                      "multiple": {
                        "type": "object",
                        "required": [
                          "data",
                          "journal",
                          "logs"
                        ],
                        "data": {
                          "$ref": "#/$defs/storageObject"
                        },
                        "journal": {
                          "$ref": "#/$defs/storageObject"
                        },
                        "logs": {
                          "$ref": "#/$defs/storageObject"
                        }
                      }
                    }
                  }
                }
              },
              "resources": {
                "$ref": "#/$defs/resourceObject"
              }
            }
          },
          "mongos": {
            "type": "object",
            "required": [
              "count"
            ],
            "properties": {
              "resources": {
                "$ref": "#/$defs/resourceObject"
              }
            }
          }
        }
      }
    },
    "replicaSet": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      },
      "if": {
        "properties": {
          "enabled": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "replicas",
          "storage"
        ],
        "properties": {
          "replicas": {
            "type": "integer"
          },
          "resources": {
            "$ref": "#/$defs/resourceObject"
          },
          "storage": {
            "type": "object",
            "required": [
              "persistenceType"
            ],
            "properties": {
              "nfs": {
                "type": "boolean"
              },
              "persistenceType": {
                "type": "string",
                "pattern": "(^single|multiple$)"
              },
              "if": {
                "properties": {
                  "persistenceType": {
                    "const": "single"
                  }
                }
              },
              "then": {
                "required": [
                  "single"
                ],
                "single": {
                  "$ref": "#/$defs/storageObject"
                }
              },
              "else": {
                "type": "object",
                "required": [
                  "multiple"
                ],
                "properties": {
                  "multiple": {
                    "type": "object",
                    "required": [
                      "data",
                      "journal",
                      "logs"
                    ],
                    "data": {
                      "$ref": "#/$defs/storageObject"
                    },
                    "journal": {
                      "$ref": "#/$defs/storageObject"
                    },
                    "logs": {
                      "$ref": "#/$defs/storageObject"
                    }
                  }
                }
              }
            }
          },
          "extAccess": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "if": {
                "properties": {
                  "enabled": {
                    "const": true
                  }
                }
              },
              "then": {
                "required": [
                  "exposeMethod"
                ],
                "exposeMethod": {
                  "type": "string",
                  "pattern": "(^LoadBalancer|NodePort$)"
                },
                "if": {
                  "properties": {
                    "exposeMethod": {
                      "const": "NodePort"
                    }
                  },
                  "then": {
                    "ports": {
                      "type": "array",
                      "items": {
                        "$ref": "#/$defs/portObject"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }    
    },
    "agent": {
      "type": "object"
    }
  },
  "$defs": {
    "storageObject": {
      "type": "object",
      "required": [
        "size"
      ],
      "properties": {
        "size": {
          "type": "string",
          "pattern": "(^[1-9]\\d*(?:\\.\\d+)?(?:E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)$)"
        },
        "storageClass": {
          "description": "storageClass to use, if absent the default storageClass is used, if set",
          "type": "string"
        }
      }
    },
    "resourceObject": {
      "type": "object",
      "properties": {
        "limits": {
          "type": "object",
          "properties": {
            "cpu": {
              "type": "number"
            },
            "mem": {
              "types": "string",
              "pattern": "(^[1-9]\\d*(?:\\.\\d+)?(?:E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)$)"
            }
          }
        },
        "requests": {
          "type": "object",
          "properties": {
            "cpu": {
              "type": "number"
            },
            "mem": {
              "types": "string",
              "pattern": "(^[1-9]\\d*(?:\\.\\d+)?(?:E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)$)"
            }
          }
        }
      }
    },
    "portsObject": {
      "required": [
        "port",
        "horizonName",
        "clusterIP"
      ],
      "properties": {
        "horizonName": {
          "type": "string"
        },
        "port": {
          "type": "string",
          "pattern": "(^((6553[0-5])|(655[0-2][0-9])|(65[0-4][0-9]{2})|(6[0-4][0-9]{3})|([1-5][0-9]{4})|([0-5]{0,5})|([0-9]{1,4}))$"
        },
        "clusterIP": {
          "type": "string",
          "pattern": "((^~|^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$)))"
        }
      }
    },
    "userObject": {
      "required": [
        "username",
        "passwdSecret",
        "roles"
      ],
      "properties": {
        "username": {
          "type": "string"
        },
        "passwdSecret": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "required": [
              "db",
              "role"
            ],
            "properties": {
              "db": {
                "type": "string"
              },
              "role": {
                "type": "string"
              }
            }
          }
        }
      }
    }
  }
}